import streamlit as st

# Configuration de la page
st.set_page_config(page_title="Tableau de bord Brevets", layout="wide")

# Titre
st.title("üìä Tableau de bord")

# Menu lat√©ral
st.sidebar.header("Filtres")
st.sidebar.text("S√©lectionnez vos crit√®res")

st.write("Bienvenue sur le tableau de bord des brevets !")


import pandas as pd

# Affichage des indicateurs
col1, col2, col3 = st.columns(3)

col1.metric(label="üìú Total Brevets", value=total_brevets)
col2.metric(label="‚úÖ Brevets Trait√©s", value=brevets_trait√©s)
col3.metric(label="‚è≥ Brevets Restants", value=brevets_restants)

# Affichage dynamique
st.subheader("üì° Suivi des traitements en temps r√©el")

col1, col2 = st.columns(2)
col1.metric("üîÑ Brevets en cours", brevets_en_cours)
col2.metric("‚úÖ Brevets termin√©s", brevets_trait√©s)

# Charger les donn√©es
@st.cache_data
def load_data():
    return pd.read_csv("brevets_6G.csv")

df = load_data()
st.write("Aper√ßu des brevets :", df.head(10))


from st_aggrid import AgGrid

st.subheader("Donn√©es des brevets")
AgGrid(df, editable=True, height=400)

# Comptage des brevets
total_brevets = len(df)
brevets_trait√©s = df[df['Status'] == 'Trait√©'].shape[0]  # Supposons qu'on ait une colonne 'Statut'
brevets_restants = total_brevets - brevets_trait√©s

# Nombre de brevets en cours
brevets_en_cours = df[df["Status"] == "En cours"].shape[0]



# Progression du traitement
progress = brevets_trait√©s / total_brevets if total_brevets > 0 else 0

st.progress(progress)
st.write(f"üîµ {brevets_trait√©s} sur {total_brevets} brevets trait√©s ({progress * 100:.2f}%)")


from st_aggrid import GridOptionsBuilder, AgGrid

st.subheader("‚úèÔ∏è Modifier les brevets")

# Options de configuration
grid_options = GridOptionsBuilder.from_dataframe(df)
grid_options.configure_default_column(editable=True)  # Rend toutes les colonnes √©ditables
grid_options.configure_pagination()  # Ajoute une pagination
grid_options.configure_side_bar()  # Ajoute une barre lat√©rale

# Affichage du tableau √©ditable
grid_response = AgGrid(df, gridOptions=grid_options.build(), editable=True, height=400)

# R√©cup√©ration des nouvelles donn√©es
df_modifi√© = grid_response["data"]

import io

st.subheader("üíæ T√©l√©charger les donn√©es mises √† jour")

# Sauvegarde du fichier modifi√©
buffer = io.BytesIO()
df_modifi√©.to_excel(buffer, index=False, engine='openpyxl')
buffer.seek(0)

st.download_button(label="üì• T√©l√©charger le fichier Excel",
                   data=buffer,
                   file_name="brevets_mis_a_jour.xlsx",
                   mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
